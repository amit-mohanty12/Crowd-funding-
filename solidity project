//SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.5.0 <0.9.0;

contract etherlottery
{
    address public manager;
    address payable[] public players;

    constructor()
    {
        manager=msg.sender;

    }

    receive() external payable
    {
        require(msg.value>=2 ether);

        players.push(payable(msg.sender));

    }

    function getBalance() public view returns(uint)
    {
        require(msg.sender== manager);
        return address(this).balance;
         
    }

    function random() public view returns(uint)
    {
        return uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp,players.length)));

    }

    function getWinner() public 
    {
        require(msg.sender== manager);
        require(players.length>=3 && players.length<=100);
        uint r=random();
        uint index= r % players.length;
        address payable winner;
        winner=players[index];
        winner.transfer(getBalance());

         players=new address payable[](0);



    }
}
